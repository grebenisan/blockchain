// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // Test 1
    it(" 1. Testing smart contract function addFarmer() that assigns an address the Farmer role", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Harvested()
        var event = supplyChain.FarmerAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // assign the farmer the FarmerRole by calling function addFarmer()
        await supplyChain.addFarmer(originFarmerID, { from: ownerID })

        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event FarmerAdded !')
    })

    // Test 2
    it(" 2. Testing smart contract function addDistributor() that assigns an address the Distributor role", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event DistributorAdded()
        var event = supplyChain.DistributorAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // assign the the Distributor Role to the distributor address, by calling function addDistributor()
        await supplyChain.addDistributor(distributorID, { from: ownerID })
 
        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event DistributorAdded !')
    })


    // Test 3
    it(" 3. Testing smart contract function addRetailer() that assigns an address the Retailer role", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event RetailerAdded()
        var event = supplyChain.RetailerAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // assign the the Retailer Role to the retailer address, by calling function addRetailer()
        await supplyChain.addRetailer(retailerID, { from: ownerID })
 
        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event RetailerAdded !')
    })


    // Test 4
    it(" 4. Testing smart contract function addConsumer() that assigns an address the Consumer role", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event ConsumerAdded()
        var event = supplyChain.ConsumerAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // assign the Consumer Role to this consumer address, by calling function addDistributor()
        await supplyChain.addConsumer(consumerID, { from: ownerID })
 
        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event ConsumerAdded !')
    })


    // Test 5
    it(" 5. Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State, it should be Harvested')
        assert.equal(eventEmitted, true, 'Invalid event Harvested !')        
    })    

    // Test 6
    it(" 6. Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, { from: originFarmerID })
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State, it should be Processed')
        assert.equal(eventEmitted, true, 'Invalid event Processed !')                
    })    

    // Test 7
    it(" 7. Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })                

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, { from: originFarmerID })        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State, it should be Packed') // State.Packed is 2
        assert.equal(eventEmitted, true, 'Invalid event Packed !')              
    })    

    // Test 8
    it(" 8. Testing smart contract function sellItem() that allows a farmer to put coffee for sale", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })                        

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State, it should be ForSale') // State.ForSale is 3
        assert.equal(eventEmitted, true, 'Invalid event ForSale !')                    
    })    

    // Test 9
    it(" 9. Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })                             

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid ownerID, should be distributorID !') // the ownerID
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID')     // the distributorID
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State, it should be Sold') // State.Sold is 4
        assert.equal(eventEmitted, true, 'Invalid event Sold !')                            
    })    

    // Test 10
    it("10. Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })                                     

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, { from: distributorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State, it should be Shipped') // State.Shipped is 5
        assert.equal(eventEmitted, true, 'Invalid event Shipped !')                          
    })    

    // Test 11
    it("11. Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })                                        

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Invalid ownerID, should be retailerID !') // the ownerID
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')     // the retailerID
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State, it should be Received') // State.Received is 6
        assert.equal(eventEmitted, true, 'Invalid event Received !')                                         
    })    

    // Test 12
    it("12. Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })                               

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, { from: consumerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID, should be consumerID !') // the ownerID
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')     // the consumerID
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State, it should be Purchased') // State.Purchased is 7
        assert.equal(eventEmitted, true, 'Invalid event Purchased !')                                                 
    })    

    // Test 13
    it("13. Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItemBufferOne()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')        
    })

    // Test 14
    it("14. Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItemBufferTwo()
        const resultBufferOne = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferOne[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferOne[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferOne[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferOne[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferOne[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferOne[8], consumerID, 'Error: Invalid item consumerID')
    })

    // Test 15
    it("15. Testing smart contract function renounceFarmer() that removes the Farmer role from an address", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event FarmerRemoved()
        var event = supplyChain.FarmerRemoved()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // removes the FarmerRole from the address by calling function renounceFarmer()
        await supplyChain.renounceFarmer({ from: originFarmerID })

        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event FarmerRemoved !')
    })    

    // Test 16
    it("16. Testing smart contract function renounceDistributor() that removes the Distributor role from an address", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event DistributorRemoved()
        var event = supplyChain.DistributorRemoved()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // removes the DistributorRole from the address by calling function renounceDistributor()
        await supplyChain.renounceDistributor({ from: distributorID })

        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event DistributorRemoved !')
    })    


    // Test 17
    it("17. Testing smart contract function renounceRetailer() that removes the Retailer role from an address", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event RetailerRemoved()
        var event = supplyChain.RetailerRemoved()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // removes the Retailer Role from the address by calling function renounceRetailer()
        await supplyChain.renounceRetailer({ from: retailerID })

        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event RetailerRemoved !')
    })    


    // Test 18
    it("18. Testing smart contract function renounceConsumer() that removes the Consumer role from an address", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event ConsumerRemoved()
        var event = supplyChain.ConsumerRemoved()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // removes the Consumer Role from the address by calling function renounceConsumer()
        await supplyChain.renounceConsumer({ from: consumerID })

        // Verify the event
        assert.equal(eventEmitted, true, 'Invalid event ConsumerRemoved !')
    })    

});

