// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');

const zokrates_proof = require('../../zokrates/code/square/proof.json');


contract('Verifier', accounts => {

    const owner = accounts[0];

    describe('Test Verifier contract - verification with correct proof', function () {

        beforeEach(async function () {
            this.contract = await Verifier.new({from: owner});
            
        })

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Verification with correct proof', async function () {
            let result = false;
            try 
            {

                result = await this.contract.verifyTx.call(
                    zokrates_proof.proof.A,
                    zokrates_proof.proof.A_p,
                    zokrates_proof.proof.B,
                    zokrates_proof.proof.B_p,
                    zokrates_proof.proof.C,
                    zokrates_proof.proof.C_p,
                    zokrates_proof.proof.H,
                    zokrates_proof.proof.K,
                    zokrates_proof.input,
                    {from: owner});

            } catch (error) {
                console.log("Error verifyTx with correct proof: ", error);
                result = false;
            }
            assert.equal(result, true, "Proof should be True!");
        })


    
        // Test verification with incorrect proof
        // just swapped A with B
        it('Verification with incorrect proof', async function () {
            let result = true;
            let incorrect_input = [123, 456];
            try 
            {

                result = await this.contract.verifyTx.call(
                    zokrates_proof.proof.A,
                    zokrates_proof.proof.A_p,
                    zokrates_proof.proof.B,
                    zokrates_proof.proof.B_p,
                    zokrates_proof.proof.C,
                    zokrates_proof.proof.C_p,
                    zokrates_proof.proof.H,
                    zokrates_proof.proof.K,
                    incorrect_input, //zokrates_proof.input,
                    {from: owner});

            } catch (error) {
                console.log("Error verifyTx with incorrect proof: ", error);
                result = false;
            }
            assert.equal(result, false, "The proof should fail because it is incorrect!");
        })



    });



});

