pragma solidity ^0.4.24;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define 'supp_chain_owner'
  address supp_chain_owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku; // not necessary to be a global variable since every owner - Farmer, distributor, Retailer - will define their own SKUs)

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku; // Stock Keeping Unit (SKU), could be the same between owners, since each owner generates its own SKUs
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
                 // upc is unique across every item generated by all farmers
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == supp_chain_owner, "The caller is NOT the owner of SupplyChain!");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "The caller's address does NOT have this address!");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "The paid ammount is NOT enough to cover the price!");
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "This item is NOT in Harvested state!");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "This item is NOT in Processed state!");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "This item is NOT in Packed state!");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "This item is NOT in ForSale state!");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "This item is NOT in Sold state!");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "This item is NOT in Shipped state!");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "This item is NOT in Received state!");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "This item is NOT in Purchased state!");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    supp_chain_owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == supp_chain_owner) {
      selfdestruct(supp_chain_owner);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(
    uint _upc,
    address _originFarmerID,
    string _originFarmName,
    string _originFarmInformation,
    string  _originFarmLatitude,
    string  _originFarmLongitude,
    string  _productNotes)
    public
    onlyFarmer()
  {
    // Add the new item as part of Harvest
    Item memory new_item;
    new_item.sku = sku;
    new_item.upc = _upc;
    new_item.ownerID = _originFarmerID; // if set to msg.sender, then a farmer could harvest other farmer's crops
    new_item.originFarmerID = _originFarmerID;
    new_item.originFarmName = _originFarmName;
    new_item.originFarmInformation = _originFarmInformation;
    new_item.originFarmLatitude = _originFarmLatitude;
    new_item.originFarmLongitude = _originFarmLongitude;
    new_item.productID = sku + _upc;
    new_item.productNotes = _productNotes;
    new_item.productPrice = 0;  // the item was not processed yet, the the price does not really make sense at this point
    new_item.itemState = State.Harvested;
    new_item.distributorID = address(0);
    new_item.retailerID = address(0);
    new_item.consumerID = address(0);

    items[_upc] = new_item;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }


  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc)
    public
    onlyFarmer()  // only a farmer can process items
    harvested(_upc)  // Call modifier to check if upc has passed previous supply chain stage (is harvested)
    verifyCaller (items[_upc].ownerID)  // Call modifier to verify caller of this function in the Farmer who owns this item
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_upc);
  }


  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc)
    public
    onlyFarmer()  // only a farmer can process items
    processed(_upc) // Call modifier to check if upc has passed previous supply chain stage (is processed)
    verifyCaller (items[_upc].ownerID) // Call modifier to verify caller of this function is the Farmer who owns the item
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }


  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price)
    public
    onlyFarmer()  // only a farmer can put an item for sale
    packed(_upc) // Call modifier to check if upc has passed previous supply chain stage (is packed)
    verifyCaller (items[_upc].ownerID) // Call modifier to verify caller of this function is the Farmer who owns the item for sale
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc)
    public
    payable
    onlyDistributor() // only distributors can buy items in bulk
    forSale(_upc) // Call modifier to check if this item is for sale
    paidEnough(items[_upc].productPrice) // Call modifer to check if buyer has paid enough
    checkValue(_upc) // Call modifer to send any excess ether back to buyer
  {
      // Update the appropriate fields - ownerID, distributorID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].distributorID = msg.sender;
      items[_upc].itemState = State.Sold;
      // Transfer money to farmer
      items[_upc].originFarmerID.transfer(items[_upc].productPrice);
      // emit the appropriate event
      emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc)
    public
    onlyDistributor() // only distributors can ship bulk items (this depends on the deal, the Farmer may be the one taking care of shipping)
    sold(_upc)  // Call modifier to check if this items is sold
    verifyCaller (items[_upc].ownerID) // Call modifier to verify caller of this function is the distributor who owns the sold item
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc)
    public
    onlyRetailer() // only retailers can receive buld items
    shipped(_upc) // Call modifier to check if the item has been shipped
    // Access Control List enforced by calling Smart Contract / DApp
    {
      // Update the appropriate fields - ownerID, retailerID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].retailerID = msg.sender;
      items[_upc].itemState = State.Received;
      // Emit the appropriate event
      emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc)
    public
    onlyConsumer() // only a consumer can purchase retail items
    received(_upc) // Call modifier to check if the item has been received (assumed is for retail sale)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].consumerID = msg.sender;
      items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
    (
      uint    itemSKU,
      uint    itemUPC,
      address ownerID,
      address originFarmerID,
      string  originFarmName,
      string  originFarmInformation,
      string  originFarmLatitude,
      string  originFarmLongitude
    )
  {
  // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;

    return
    (
      itemSKU,
      itemUPC,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
    (
      uint    itemSKU,
      uint    itemUPC,
      uint    productID,
      string  productNotes,
      uint    productPrice,
      uint    itemState,
      address distributorID,
      address retailerID,
      address consumerID
    )
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;

    return
    (
      itemSKU,
      itemUPC,
      productID,
      productNotes,
      productPrice,
      itemState,
      distributorID,
      retailerID,
      consumerID
    );
  }
}
